import telebot
from telebot import types
import sqlite3

API_TOKEN = '7424841598:AAFVK9BDZHJz2ZJ5sj1GnCKoWtMHECb6ePM'


bot = telebot.TeleBot(API_TOKEN)
DB_FILE = 'queues.db'

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–µ—Ä–µ–¥–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS queues (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            queue_name TEXT NOT NULL,
            created_by INTEGER NOT NULL,
            UNIQUE(chat_id, queue_name)
        )
    ''')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–∞ 'created_by' –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    cursor.execute("PRAGMA table_info(queues)")
    columns = [info[1] for info in cursor.fetchall()]
    if 'created_by' not in columns:
        cursor.execute('ALTER TABLE queues ADD COLUMN created_by INTEGER NOT NULL DEFAULT 0')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS queue_members (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            queue_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            username TEXT,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(queue_id, user_id),
            FOREIGN KEY(queue_id) REFERENCES queues(id) ON DELETE CASCADE
        )
    ''')

    conn.commit()
    conn.close()

def is_user_admin(chat_id, user_id):
    try:
        admins = bot.get_chat_administrators(chat_id)
        for admin in admins:
            if admin.user.id == user_id:
                return True
        return False
    except:
        return False

init_db()

@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_queue –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏.")

@bot.message_handler(commands=['create_queue'])
def handle_create_queue(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:")
    bot.register_next_step_handler(msg, receive_queue_name)

def receive_queue_name(message):
    queue_name = message.text.strip()
    chat_id = message.chat.id
    user_id = message.from_user.id

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    try:
        cursor.execute('''
            INSERT INTO queues (chat_id, queue_name, created_by)
            VALUES (?, ?, ?)
        ''', (chat_id, queue_name, user_id))
        conn.commit()
        queue_id = cursor.lastrowid

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
        send_queue_message(chat_id, queue_id, queue_name)
        bot.send_message(chat_id, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    except sqlite3.IntegrityError:
        bot.reply_to(message, "–û—á–µ—Ä–µ–¥—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    finally:
        conn.close()

def send_queue_message(chat_id, queue_id, queue_name):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
    members = get_queue_members(queue_id)
    members_text = format_members_list(members)

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup()
    button_join = types.InlineKeyboardButton("‚úÖ –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data=f"join_{queue_id}")
    button_leave = types.InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data=f"leave_{queue_id}")
    markup.add(button_join, button_leave)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(chat_id, f"üìã –û—á–µ—Ä–µ–¥—å: {queue_name}\n\nüìù –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{members_text}", reply_markup=markup)

def get_queue_members(queue_id):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT name, username FROM queue_members
        WHERE queue_id = ?
        ORDER BY joined_at ASC
    ''', (queue_id,))
    members = cursor.fetchall()
    conn.close()
    return members

def format_members_list(members):
    if not members:
        return "–û—á–µ—Ä–µ–¥—å –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
    text = ""
    for idx, (name, username) in enumerate(members, start=1):
        if username:
            text += f"{idx}. {name} (@{username})\n"
        else:
            text += f"{idx}. {name}\n"
    return text

@bot.callback_query_handler(func=lambda call: call.data.startswith('join_') or call.data.startswith('leave_') or call.data.startswith('delete_'))
def handle_queue_actions(call):
    if call.data.startswith('join_'):
        handle_join_queue(call)
    elif call.data.startswith('leave_'):
        handle_leave_queue(call)
    elif call.data.startswith('delete_'):
        handle_delete_queue_callback(call)

def handle_join_queue(call):
    queue_id = int(call.data.split('_')[1])
    user_id = call.from_user.id
    name = call.from_user.full_name
    username = call.from_user.username
    chat_id = call.message.chat.id

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—á–µ—Ä–µ–¥—å
    cursor.execute('SELECT queue_name FROM queues WHERE id = ?', (queue_id,))
    result = cursor.fetchone()
    if not result:
        bot.answer_callback_query(call.id, "–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        conn.close()
        return

    queue_name = result[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
    cursor.execute('SELECT * FROM queue_members WHERE queue_id = ? AND user_id = ?', (queue_id, user_id))
    if cursor.fetchone():
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏.")
        conn.close()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å
    cursor.execute('''
        INSERT INTO queue_members (queue_id, user_id, name, username)
        VALUES (?, ?, ?, ?)
    ''', (queue_id, user_id, name, username))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    members = get_queue_members(queue_id)
    members_text = format_members_list(members)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üìã –û—á–µ—Ä–µ–¥—å: {queue_name}\n\nüìù –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{members_text}",
            reply_markup=call.message.reply_markup
        )
        bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å.")
    except telebot.apihelper.ApiException:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å.")

    conn.close()

def handle_leave_queue(call):
    queue_id = int(call.data.split('_')[1])
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—á–µ—Ä–µ–¥—å
    cursor.execute('SELECT queue_name FROM queues WHERE id = ?', (queue_id,))
    result = cursor.fetchone()
    if not result:
        bot.answer_callback_query(call.id, "–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        conn.close()
        return

    queue_name = result[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
    cursor.execute('SELECT * FROM queue_members WHERE queue_id = ? AND user_id = ?', (queue_id, user_id))
    if not cursor.fetchone():
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.")
        conn.close()
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    cursor.execute('DELETE FROM queue_members WHERE queue_id = ? AND user_id = ?', (queue_id, user_id))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    members = get_queue_members(queue_id)
    members_text = format_members_list(members)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üìã –û—á–µ—Ä–µ–¥—å: {queue_name}\n\nüìù –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{members_text}",
            reply_markup=call.message.reply_markup
        )
        bot.answer_callback_query(call.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
    except telebot.apihelper.ApiException:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å.")

    conn.close()

def handle_delete_queue_callback(call):
    queue_id = int(call.data.split('_')[1])
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

    if not is_user_admin(chat_id, user_id):
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—á–µ—Ä–µ–¥–∏
    cursor.execute('SELECT queue_name FROM queues WHERE id = ?', (queue_id,))
    result = cursor.fetchone()

    if not result:
        bot.answer_callback_query(call.id, "–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        conn.close()
        return

    queue_name = result[0]

    # –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    cursor.execute('DELETE FROM queues WHERE id = ?', (queue_id,))
    cursor.execute('DELETE FROM queue_members WHERE queue_id = ?', (queue_id,))
    conn.commit()
    conn.close()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except telebot.apihelper.ApiException:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å

    bot.answer_callback_query(call.id, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
    bot.send_message(chat_id, f"–û—á–µ—Ä–µ–¥—å '{queue_name}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")


@bot.message_handler(commands=['delete_queue'])
def handle_delete_queue(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_user_admin(chat_id, user_id):
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    cursor.execute('SELECT id, queue_name FROM queues WHERE chat_id = ?', (chat_id,))
    queues = cursor.fetchall()
    conn.close()

    if not queues:
        bot.reply_to(message, "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—á–µ—Ä–µ–¥–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    for queue in queues:
        queue_id, queue_name = queue
        button = types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å '{queue_name}'", callback_data=f"delete_{queue_id}")
        markup.add(button)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)

